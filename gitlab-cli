#!/bin/bash
set -x

project=$1
branch=$2
tokenuser=$3
gitlaburl=https://gitlab.com/api/v4

datefile=`date '+%d%m%y%H%M%S'`
tmpfile="./gitlabtrigger_pipeline_$datefile.tmp"
tmpprojectsfile="./gitlabtrigger_projects_$datefile.tmp"
tmptokenfile="./token_$datefile.tmp"

# check arg help
if [[ $# -eq 0 ]] ; then
    echo 'Usage : bin project branch'
    echo 'Example : bin transfert master'
    exit 0
fi

function get_projects() {
    echo "------------------------------------------------"
    echo " Get Gitlab Projects"
    echo "------------------------------------------------"
    echo ""

    curl -X GET --header "PRIVATE-TOKEN: $tokenuser" -s $gitlaburl/projects/ | jq . > $tmpprojectsfile
}

function get_project_id() {
    echo "------------------------------------------------"
    echo " Get Gitlab project pipelines"
    echo "------------------------------------------------"
    echo ""

    project_id=(`curl --header "PRIVATE-TOKEN: $tokenuser" -s $gitlaburl/projects?search=$project | jq -r .[].id`)

    echo $project_id
}

function create_project_trigger() {
    echo "------------------------------------------------"
    echo " create project trigger for $project"
    echo "------------------------------------------------"
    echo ""

    curl -X POST --header "PRIVATE-TOKEN: $tokenuser" --form description="$project token" -s $gitlaburl/projects/$project_id/triggers | jq -r > $tmptokenfile

    token_trigger=`jq -r .token $tmptokenfile`
    token_trigger_id=`jq -r .id $tmptokenfile`

    echo "------------------------------------------------"
    echo "Created trigger $token_trigger"
}

function run_pipeline() {
    echo "------------------------------------------------"
    echo " Gitlab pipeline id=$project_id"
    echo "------------------------------------------------"
    echo ""

    echo "Trigger Gitlab pipeline job for project $projects"
    curl -X POST  -F token="$tokenuser"  -F ref=$branch -s $gitlaburl/api/v4/projects/$projects/trigger/pipeline | jq . > $tmpfile

    id=`jq -r '.id' $tmpfile`
    url=`jq -r '.web_url' $tmpfile`
    echo "Gitlab job id : $id"
    echo "Gitlab job url : $url"
    echo ""

    until [ $(curl --header "PRIVATE-TOKEN: $tokenuser"  -s $gitlaburl/api/v4/projects/$projects/pipelines/$id | jq -r .status) = "success" ]; do
    echo "pipeline is running, please wait  ..."
    sleep 2
    done

    rm -f $tmpfile
    echo ""
    echo "Deployment complete"
    echo "Success ! " 
}

function run_prod_pipeline() {
    echo "------------------------------------------------"
    echo " Gitlab pipeline id=$project_id"
    echo " Deploy to $branch"
    echo "------------------------------------------------"
    echo ""

    curl -X POST --header "PRIVATE-TOKEN: $tokenuser" -s "$gitlaburl/projects/$project_id/trigger/pipeline?ref=$branch&token=$token_trigger" | jq . > $tmpfile
    echo "Pipeline started on branch $branch"

    cat $tmpfile

    id=`jq -r '.id' $tmpfile`

    # running_pipeline = `(curl -F token="$tokenuser" -s $gitlaburl/projects/$project_id/pipelines/pipelines?status=running | jq -r '.[].id')`
    until [[ $(curl --header "PRIVATE-TOKEN: $tokenuser" -s $gitlaburl/projects/$project_id/pipelines/$id | jq -r .status) = "success" ]]; do
    echo "pipeline is running, please wait  ..."
    sleep 10
    done

    echo "------------------------------------------------"
    echo "Build complete"
    echo "Now need to run manual deploy"

    manual_job_id=(`curl --header "PRIVATE-TOKEN: $tokenuser" -s $gitlaburl/projects/$project_id/pipelines/$id/jobs?scope=manual | jq -r .[].id`)

    #run manual job
    curl -X POST --header "PRIVATE-TOKEN: $tokenuser" "$gitlaburl/projects/$project_id/jobs/$manual_job_id/play"
    echo "------------------------------------------------"
    echo "Deploy started"
    echo ""

    until [[ $(curl --header "PRIVATE-TOKEN: $tokenuser" -s $gitlaburl/projects/$project_id/jobs/$manual_job_id | jq -r .status) = "success" ]]; do
    echo "deploy is running, please wait ..."
    echo "------------------------------------------------"
    sleep 10
    done

    rm -f $tmpfile
    echo ""
    echo "Deployment complete"
    echo "Success ! " 
    echo "------------------------------------------------"
}

function delete_trigger() {
    echo "------------------------------------------------"
    echo "Build complete"
    curl --request DELETE --header "PRIVATE-TOKEN: $tokenuser" "$gitlaburl/projects/$project_id/triggers/$token_trigger_id"

}

if [[ $branch == prod ]] ; then
    get_project_id
    create_project_trigger
    run_prod_pipeline
    delete_trigger
fi

if [[ $branch == master ]] ; then
    get_project_id
    create_project_trigger
    run_prod_pipeline
    delete_trigger
fi
